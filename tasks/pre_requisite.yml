---
- name: "prometheus | Assert that system manager is systemd"
  ansible.builtin.assert:
    that:
      - "hostvars[inventory_hostname]['ansible_service_mgr'] == 'systemd'"
    fail_msg: "System manager is not systemd"
    quiet: "true"
- name: "prometheus | Add the OS specific variables"
  ansible.builtin.include_vars:
    file: "{{ hostvars[inventory_hostname]['ansible_os_family'] + '.yml' }}"
- name: "prometheus | Set facts about prometheus role"
  ansible.builtin.set_fact:
    prometheus_systemd_dir: "{{ '/etc/systemd/system/' +
      hostvars[inventory_hostname]['prometheus_service'] + '.service.d' }}"
    prometheus_service_settings:
      "{{ hostvars[inventory_hostname]['prometheus'] |
      community.general.json_query('[].prometheus_options[]') }}"
    prometheus_lint: "{{ hostvars[inventory_hostname]['prometheus'] |
      community.general.json_query('[].lint | [0]') }}"
    prometheus_instance_settings:
      "{{ hostvars[inventory_hostname]['prometheus'] |
      community.general.json_query('[].prometheus_settings[] | [0]') }}"
    prometheus_rules_settings:
      "{{ hostvars[inventory_hostname]['prometheus'] |
      community.general.json_query('[].prometheus_rules[] | [0]') }}"
    prometheus_package_state: "{{ hostvars[inventory_hostname]['prometheus'] |
      community.general.json_query('[].package_state | [0]') }}"
    alertmanager_systemd_dir: "{{ '/etc/systemd/system/' +
      hostvars[inventory_hostname]['alertmanager_service'] + '.service.d' }}"
    alertmanager_service_settings:
      "{{ hostvars[inventory_hostname]['prometheus'] |
      community.general.json_query('[].alertmanager_options[]') }}"
    alertmanager_instance_settings:
      "{{ hostvars[inventory_hostname]['prometheus'] |
      community.general.json_query('[].alertmanager_settings[] | [0]') }}"
    alertmanager_instance_gossip:
      "{{ hostvars[inventory_hostname]['prometheus'] |
      community.general.json_query('[].alertmanager_gossip[] | [0]') }}"
    alertmanager_instance_templates:
      "{{ hostvars[inventory_hostname]['prometheus'] |
      community.general.json_query('[].alertmanager_templates[] | [0]') }}"
    amtool_instance_settings: "{{ hostvars[inventory_hostname]['prometheus'] |
      community.general.json_query('[].amtool_settings[] | [0]') }}"
- name: "prometheus | Assert that package state in valid value"
  ansible.builtin.assert:
    that:
      - "vars['prometheus_package_state'] in ['present', 'latest']"
    fail_msg: "'package_state' must be in 'present' or 'latest'"
    quiet: "true"
  when:
    - "vars['prometheus_package_state'] is defined"
    - "vars['prometheus_package_state'] != ''"
- name: "prometheus | Create override systemd prometheus service directory"
  ansible.builtin.file:
    path: "{{ vars['prometheus_systemd_dir'] }}"
    state: "directory"
    group: "root"
    owner: "root"
    mode: "0755"
    recurse: "no"
  when:
    - "vars['prometheus_service_settings'] is defined"
    - "vars['prometheus_service_settings'] != []"
- name: "prometheus | Create override systemd alertmanager service directory"
  ansible.builtin.file:
    path: "{{ vars['alertmanager_systemd_dir'] }}"
    state: "directory"
    group: "root"
    owner: "root"
    mode: "0755"
    recurse: "no"
  when:
    - "vars['alertmanager_service_settings'] is defined"
    - "vars['alertmanager_service_settings'] != []"
- name: "prometheus | Create Prometheus directory"
  ansible.builtin.file:
    path: "{{ hostvars[inventory_hostname]['prometheus_conf_dest'] }}"
    state: "directory"
    owner: "root"
    group: "root"
    mode: "0755"
  when:
    - "vars['prometheus_instance_settings'] is defined"
    - "vars['prometheus_instance_settings'] != ''"
- name: "prometheus | Create Alertmanager directory"
  ansible.builtin.file:
    path: "{{ hostvars[inventory_hostname]['alertmanager_conf_dest'] }}"
    state: "directory"
    owner: "root"
    group: "root"
    mode: "0755"
  when:
    - "vars['alertmanager_instance_settings'] is defined"
    - "vars['alertmanager_instance_settings'] != ''"
- name: "prometheus | Create amtool directory"
  ansible.builtin.file:
    path: "{{ hostvars[inventory_hostname]['amtool_conf_dest'] }}"
    state: "directory"
    owner: "root"
    group: "root"
    mode: "0755"
  when:
    - "vars['amtool_instance_settings'] is defined"
    - "vars['amtool_instance_settings'] != ''"
